package edu.franklin.util;
import edu.franklin.misc.DataGenerator;
import edu.franklin.misc.IntegerGenerator;
import edu.franklin.misc.ArrayElementGenerator;
import edu.franklin.misc.RandomIntegerGenerator;

/**
 * Tests for functionality defined in AbstractCollection.  This class is
 * itself abstract, as it relies on a subclass to define the method
 * <tt>getCollection</tt> that will return a concrete implementation.
 *
 * @author Todd A. Whittaker
 * @version 2005-09
 */
public abstract class AbstractCollectionTest extends junit.framework.TestCase
{
    /** Used to specify type information to generators. */
    protected Integer [] integerType = null;
    /** Used to specify type information to generators. */
    protected Object [] objectType = null;
    
    /** Convenience generator for empty collections. */
    protected IntegerGenerator emptyGenerator = new IntegerGenerator(0);
    /** Convenience generator for a sequence of integers. */
    protected IntegerGenerator sequenceGenerator =
        new IntegerGenerator(SEQUENCE_SIZE);

    /** The default size of collections generated by sequenceGenerator. */
    protected static final int SEQUENCE_SIZE = 10;

    /**
     * This method should be overridden in derived classes such that it
     * will return a concrete implementation of Collection based on the
     * data provided in the generator.
     * @param <E> the type of data held in the collection
     * @param generator the generator which produces the data
     * @return a concrete collection of the right type containing
     * the data from the generator
     */
    public abstract <E> Collection<E> getCollection(
        DataGenerator<E> generator);
    
    /**
     * Default constructor for test class CollectionsTests.
     */
    public AbstractCollectionTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    protected void setUp()
    {
        emptyGenerator.reset();
        sequenceGenerator.reset();
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    protected void tearDown()
    {
    }

    /**
     * A convenience method that will build a collection from the
     * data given in an array.
     * @param <E> the type of data held in the collection
     * @param arr the array from which to build the collection
     * @return a collection holding the data
     */
    public <E> Collection<E> getCollection(E [] arr)
    {
        return getCollection(new ArrayElementGenerator<E>(arr));
    }

    /**
     * Test creating an empty collection.
     */
    public void testCreating()
    {
        Collection<Integer> c = getCollection(emptyGenerator);
        assertEquals(0, c.size());
    }
    
    /**
     * Test creating an empty collection, and adding a few elements to it.
     */
    public void testAddingSimple()
    {
        Collection<Integer> c = getCollection(emptyGenerator);
        assertEquals(0, c.size());
        
        for (int i = 0; i < SEQUENCE_SIZE; ++i)
        {
            assertTrue(c.add(i));
            assertEquals(i + 1, c.size());
        }
    }

    /**
     * Test adding null into a collection.
     */
    public void testAddingNulls()
    {
        Collection<Integer> c = getCollection(emptyGenerator);
        assertEquals(0, c.size());
        
        for (int i = 0; i < SEQUENCE_SIZE; ++i)
        {
            assertTrue(c.add(null));
            assertEquals(i + 1, c.size());
        }
    }

    /**
     * Test iterating through a collection, verifying data.  Going beyond
     * the end of the collection should trigger a NoSuchElementException.
     */
    public void testIteration()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        
        int i = 0;
        Iterator<Integer> itr = c.iterator();
        while (itr.hasNext())
        {
            assertEquals(i, itr.next().intValue());
            ++i;
        }
        assertEquals(i, c.size());
        
        // see what happens when we go beyond the end;
        try
        {
            itr.next();
            fail("Should have thrown NoSuchElementException");
        }
        catch (java.util.NoSuchElementException e)
        {
            assertTrue(true);
        }
    }
    
    /**
     * Tests removing the first element from a collection using the iterator.
     */
    public void testIteratorRemoveSimple()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        
        Iterator<Integer> itr = c.iterator();
        itr.next();
        itr.remove();
        assertEquals(SEQUENCE_SIZE - 1, c.size());
        assertEquals(1, itr.next().intValue());
    }
    
    /**
     * Tests removing every other element from the collection using the
     * iterator.
     */
    public void testIteratorRemoveComplex()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        
        for (Iterator<Integer> itr = c.iterator(); itr.hasNext(); )
        {
            itr.next();
            itr.next();
            itr.remove();
        }
        
        assertEquals(SEQUENCE_SIZE / 2, c.size());
        
        int i = 0;
        for (Integer element : c)
        {
            assertEquals(i, element.intValue());
            i += 2;
        }
    }
    
    /**
     * Tests removing everything from the collection using the iterator.
     */
    public void testIteratorRemovingEverything()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        
        int count = 0;
        for (Iterator<Integer> itr = c.iterator(); itr.hasNext(); )
        {
            itr.next();
            itr.remove();
            ++count;
        }
        assertEquals(count, SEQUENCE_SIZE);
        assertEquals(0, c.size());
        assertFalse(c.iterator().hasNext());
    }
    
    /**
     * Tests calling the remove method of the iterator without a prior
     * call to the next method.
     */
    public void testIteratorRemoveWithoutNext()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        Iterator<Integer> itr = c.iterator();
        
        itr.next();
        itr.next();
        itr.remove();
        
        try
        {
            itr.remove();
            fail("Should have thrown IllegalStateException");
        }
        catch (java.lang.IllegalStateException e)
        {
            assertTrue(true);
        }
    }

    /**
     * Tests the contains method.
     */
    public void testContains()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        for (int i = 0; i < SEQUENCE_SIZE; ++i)
        {
            assertTrue(c.contains(new Integer(i)));
        }
        for (int i = SEQUENCE_SIZE; i < SEQUENCE_SIZE * 2; ++i)
        {
            assertFalse(c.contains(new Integer(i)));
        }
    }
    
    /**
     * Tests the containsAll method.
     */
    public void testContainsAll()
    {
        //create collections c1 and c2
        Integer [] arr1 = new Integer [] {2, 5, 33, 7, 9, 10, 44, 8};
        Integer [] arr2 = new Integer [] {5, 9, 44, 2};
        Integer [] arr3 = new Integer [] {5, 9, 7, 33, 12};
        Collection<Integer> c1 = getCollection(arr1);
        Collection<Integer> c2 = getCollection(arr2);
        Collection<Integer> c3 = getCollection(arr3);
        //test collections c1, c2, and c3 are created
        assertEquals(8, c1.size());
        assertEquals(4, c2.size());
        assertEquals(5, c3.size());
        //Test c1 contains all elements in c2
        assertEquals(true, c1.containsAll(c2));
        //Test c1 contains all elements in c3
        assertEquals(false, c1.containsAll(c3));
    }
    
    /**
     * Tests the addAll method.
     */
    public void testAddAll()
    {
        Integer [] arr1 = new Integer [] {1, 2, 3, 4, 5};
        Integer [] arr2 = new Integer [] {6, 7, 8, 9, 10};
        Collection<Integer> c1 = getCollection(arr1);
        Collection<Integer> c2 = getCollection(arr2);
        
        // ensure c2 is built properly
        assertTrue(c2.addAll(c1));
        assertEquals(arr1.length + arr2.length, c2.size());
        for (int i = 0; i < arr1.length; ++i)
        {
            assertTrue(c2.contains(arr1[i]));
        }
        for (int i = 0; i < arr2.length; ++i)
        {
            assertTrue(c2.contains(arr2[i]));
        }
        
        // ensure that c1 is unchanged
        assertEquals(arr1.length, c1.size());
        for (int i = 0; i < arr1.length; ++i)
        {
            assertTrue(c1.contains(arr1[i]));
        }
        for (int i = 0; i < arr2.length; ++i)
        {
            assertFalse(c1.contains(arr2[i]));
        }
    }
    
    /**
     * Tests the isEmpty method.
     */
    public void testIsEmpty()
    {
        Collection<Integer> c1 = getCollection(emptyGenerator);
        Collection<Integer> c2 = getCollection(new IntegerGenerator(1));
        
        assertTrue(c1.isEmpty());
        assertFalse(c2.isEmpty());
        
        Iterator<Integer> itr = c2.iterator();
        itr.next();
        itr.remove();
        assertTrue(c2.isEmpty());
    }

    /**
     * Tests the remove method.
     */
    public void testRemove()
    {
        Integer [] arr = new Integer [] {1, 3, 5, 3, 7, 1, 9, 11, 13, 3};
        Collection<Integer> c = getCollection(arr);
        
        // remove a single element
        assertTrue(c.remove(new Integer(9)));
        assertFalse(c.contains(new Integer(9)));
        assertEquals(c.size(), 9);
        
        // remove elements repeatedly
        int count = 0;
        while (c.remove(new Integer(3)))
        {
            ++count;
        }
        assertEquals(3, count);
        assertEquals(6, c.size());
    }
    
    /**
     * Tests the removeAll method.
     */
    public void testRemoveAll()
    {
        Integer [] arr1 = new Integer [] {1, 3, 5, 3, 7, 1, 9, 11, 13, 3};
        Integer [] arr2 = new Integer [] {3, 5, 1};

        Collection<Integer> c = getCollection(arr1);
        Collection<Integer> toBeRemoved = getCollection(arr2);
        
        c.removeAll(toBeRemoved);
        for (Iterator<Integer> itr = toBeRemoved.iterator(); itr.hasNext(); )
        {
            assertFalse(c.contains(itr.next()));
        }
        assertEquals(4, c.size());
    }
    
    /**
     * Tests the retainAll method.
     */
    public void testRetainAll()
    {
        //create collections c1 and c2
        Integer [] arr1 = new Integer [] {2, 5, 33, 7, 9, 10, 44, 8};
        Integer [] arr2 = new Integer [] {5, 9, 44, 2};
        Integer [] arr3 = new Integer [] {58, 59, 27, 35, 12};
        Collection<Integer> c1 = getCollection(arr1);
        Collection<Integer> c2 = getCollection(arr2);
        Collection<Integer> c3 = getCollection(arr3);
        //test collections c1, c2, and c3 are created
        assertEquals(8, c1.size());
        assertEquals(4, c2.size());
        assertEquals(5, c3.size());
        //Test c1 retains all elements
        assertEquals(false, c1.retainAll(c3));
        //Test c1 does not retains all elements
        assertEquals(true, c1.retainAll(c2));
    }
    
    /**
     * Tests the clear method.
     */
    public void testClear()
    {
        Collection<Integer> c = getCollection(sequenceGenerator);
        c.clear();
        assertEquals(0, c.size());
        assertTrue(c.isEmpty());
    }
    
    /**
     * Tests toString on a simple linear collection.
     */
    public void testToStringEasy()
    {
        Collection<Integer> c = getCollection(new IntegerGenerator(5));
        assertEquals("[0, 1, 2, 3, 4]", c.toString());
    }

    /**
     * Tests toString on a collection that contains another collection.
     */
    public void testToStringMedium()
    {
        // general purpose collections, not specific types
        Collection<Object> c1 = getCollection(objectType);
        Collection<Object> c2 = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));
        }
        c1.add(c2);
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
        }
        assertEquals("[0, 1, 2, 3, 4, [0, 1, 2, 3, 4], 5, 6, 7, 8, 9]",
            c1.toString());
    }

    /**
     * Tests toString on two collections, each of which contain each other
     * multiple times.
     */
    public void testToStringHard()
    {
        Collection<Object> c1 = getCollection(new Object[0]);
        Collection<Object> c2 = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));
        }
        c2.add(c2);
        c1.add(c2);
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
        }
        c2.add(c1);
        c1.add(c1);
        assertEquals("[0, 1, 2, 3, 4, [0, 1, 2, 3, 4, [...], "
            + "[...]], 5, 6, 7, 8, 9, [...]]", c1.toString());
        assertEquals("[0, 1, 2, 3, 4, [...], [0, 1, 2, 3, 4, [...], "
            + "5, 6, 7, 8, 9, [...]]]", c2.toString());
    }

    /**
     * Tests hashCode on a simple linear collection.
     */
    public void testHashCodeEasy()
    {
        Collection<Integer> c = getCollection(new IntegerGenerator(5));
        assertEquals(28660961, c.hashCode());
    }

    /**
     * Tests hashCode on a collection that contains another collection.
     */
    public void testHashCodeMedium()
    {
        Collection<Object> c1 = getCollection(objectType);
        Collection<Object> c2 = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));
        }
        c1.add(c2);
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
        }
        assertEquals(-830782745, c1.hashCode());
    }

    /**
     * Tests hashCode on two collections, each of which contain each other
     * multiple times.
     */
    public void testHashCodeHard()
    {
        Collection<Object> c1 = getCollection(objectType);
        Collection<Object> c2 = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));
        }
        c2.add(c2);
        c1.add(c2);
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
        }
        c2.add(c1);
        c1.add(c1);
        assertEquals(309564857, c1.hashCode());
        assertEquals(987779705, c2.hashCode());
    }
    
    /**
     * Tests equals on a simple linear collection.
     */
    public void testEqualsEasy()
    {
        Collection<Integer> c1 = getCollection(sequenceGenerator.reset());
        Collection<Integer> c2 = getCollection(sequenceGenerator.reset());
        Collection<Integer> c3 = getCollection(new IntegerGenerator(7));
        assertTrue(c1.equals(c1));
        assertTrue(c1.equals(c2));
        assertFalse(c1.equals(c3));
        assertEquals(c1.hashCode(), c2.hashCode());
    }

    /**
     * Tests equals on a collection that contains another collection.
     */
    public void testEqualsMedium()
    {
        Collection<Object> c1 = getCollection(objectType);
        Collection<Object> c2 = getCollection(objectType);
        Collection<Object> c1Copy = getCollection(objectType);
        Collection<Object> c2Copy = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));

            c1Copy.add(new Integer(i));
            c2Copy.add(new Integer(i));
        }
        
        c1.add(c2);
        c1Copy.add(c2Copy);
        
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
            c1Copy.add(new Integer(i));
        }
        
        assertTrue(c1.equals(c1));
        assertTrue(c1.equals(c1Copy));
        assertFalse(c1.equals(c2));

        assertEquals(c1.hashCode(), c1Copy.hashCode());
        assertEquals(c2.hashCode(), c2Copy.hashCode());
    }

    /**
     * Tests equals on two collections, each of which contain each other
     * multiple times.
     */
    public void testEqualsHard()
    {
        Collection<Object> c1 = getCollection(objectType);
        Collection<Object> c2 = getCollection(objectType);
        Collection<Object> c1Copy = getCollection(objectType);
        Collection<Object> c2Copy = getCollection(objectType);
        
        for (int i = 0; i < 5; ++i)
        {
            c1.add(new Integer(i));
            c2.add(new Integer(i));

            c1Copy.add(new Integer(i));
            c2Copy.add(new Integer(i));
        }
        c2.add(c2);
        c1.add(c2);
        
        c2Copy.add(c2Copy);
        c1Copy.add(c2Copy);
        
        for (int i = 5; i < 10; ++i)
        {
            c1.add(new Integer(i));
            c1Copy.add(new Integer(i));
        }
        c2.add(c1);
        c1.add(c1);

        c2Copy.add(c1Copy);
        c1Copy.add(c1Copy);

        assertTrue(c1.equals(c1));
        assertTrue(c1.equals(c1Copy));
        assertTrue(c2.equals(c2));
        assertTrue(c2.equals(c2Copy));
        assertFalse(c1.equals(c2));
        
        assertEquals(c1.hashCode(), c1Copy.hashCode());
        assertEquals(c2.hashCode(), c2Copy.hashCode());
    }
    
    /**
     * Tests the toArray method.
     */
    public void testToArray()
    {
        Integer [] arr = new Integer [] {1, 3, 5, 3, 7, 1, 9, 11, 13, 3};
        Collection<Integer> coll = getCollection(arr);
        
        Object [] result = coll.toArray();
        for (int i = 0; i < arr.length; ++i)
        {
            assertEquals(arr[i], (Integer)result[i]);
            ++i;
        }
    }

    /**
     * Tests the toArray method where the parameter is large enough.
     */
    public void testToArrayT1()
    {
        Integer [] arr = new Integer [] {1, 3, 5, 3, 7, 1, 9, 11, 13, 3};
        Integer [] result = new Integer[arr.length + 5];
        Collection<Integer> coll = getCollection(arr);
        
        // fill result array with some junk.
        DataGenerator<Integer> generator =
            new RandomIntegerGenerator(result.length);
        for (int i = 0; generator.hasNext(); ++i)
        {
            result[i] = generator.next();
        }
        
        // should use provided array
        assertTrue(result == coll.toArray(result));
        
        // make sure junk was replaced
        for (int i = 0; i < arr.length; ++i)
        {
            assertEquals(arr[i], result[i]);
            ++i;
        }
        
        // should append the null after the data
        assertNull(result[arr.length]);
    }

    /**
     * Tests the toArray method where the parameter is not large enough.
     */
    public void testToArrayT2()
    {
        Integer [] arr = new Integer [] {1, 3, 5, 3, 7, 1, 9, 11, 13, 3};
        Integer [] target = new Integer[arr.length - 1];
        Integer [] result;
        
        Collection<Integer> coll = getCollection(arr);
        
        result = coll.toArray(target);
        
        // should use provided array
        assertTrue(result != target);
        
        for (int i = 0; i < arr.length; ++i)
        {
            assertEquals(arr[i], result[i]);
            ++i;
        }
    }
}
