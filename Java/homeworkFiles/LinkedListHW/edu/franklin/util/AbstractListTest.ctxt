#BlueJ class context
comment0.target=class\ AbstractListTest
comment0.text=\nTests\ for\ functionality\ defined\ in\ AbstractList.\ \ This\ class\ is\nitself\ abstract,\ as\ it\ relies\ on\ a\ subclass\ to\ define\ the\ method\n<tt>getList</tt>\ that\ will\ return\ a\ concrete\ implementation.\n\n@author\ Todd\ A.\ Whittaker\n@version\ 2005-09\n\n
comment1.params=
comment1.target=void\ testAddAllAtIndex()
comment1.text=\nTest\ adding\ the\ contents\ of\ an\ entire\ collection\ at\ a\ specified\ index.\n\n
comment10.params=
comment10.target=void\ tearDown()
comment10.text=\nTears\ down\ the\ test\ fixture.\n\nCalled\ after\ every\ test\ case\ method.\n\n
comment11.params=
comment11.target=void\ testAddAtIndex()
comment11.text=\nTest\ adding\ elements\ at\ a\ specified\ index.\n\n
comment12.params=generator
comment12.target=<E>\ List<E>\ getList(DataGenerator<E>)
comment12.text=\nThis\ method\ should\ be\ overridden\ in\ derived\ classes\ such\ that\ it\nwill\ return\ a\ concrete\ implementation\ of\ List\ based\ on\ the\ndata\ provided\ in\ the\ generator.\n@param\ <E>\ the\ type\ of\ data\ held\ in\ the\ collection\n@param\ generator\ the\ generator\ which\ produces\ the\ data\n@return\ a\ concrete\ list\ of\ the\ right\ type\ containing\nthe\ data\ from\ the\ generator\n\n
comment13.params=
comment13.target=void\ testListGetAtIndex()
comment13.text=\nTest\ the\ get\ method\ to\ extract\ elements\ at\ a\ specified\ index.\n\n
comment14.params=
comment14.target=void\ testIndexOf()
comment14.text=\nTest\ the\ indexOf\ method\ (searching).\n\n
comment15.params=
comment15.target=void\ testIteratorSetBackward()
comment15.text=\nTest\ the\ iterator\ set\ method\ while\ iterating\ backward.\n\n
comment16.params=
comment16.target=void\ testIteratorPrevious()
comment16.text=\nTest\ the\ iterator\ previous\ method\ for\ backward\ iteration.\n\n
comment17.params=
comment17.target=void\ testIteratorNextIndex()
comment17.text=\nTest\ the\ list\ iterator\ nextIndex\ method.\n\n
comment18.params=
comment18.target=void\ setUp()
comment18.text=\nSets\ up\ the\ test\ fixture.\n\nCalled\ before\ every\ test\ case\ method.\n\n
comment19.params=
comment19.target=void\ testListSetAtIndex()
comment19.text=\nTest\ replacing\ an\ element\ at\ a\ specified\ index.\n\n
comment2.params=
comment2.target=void\ testIteratorHasPrevious()
comment2.text=\nTest\ the\ iterator\ hasPrevious\ method.\n\n
comment20.params=
comment20.target=void\ testIteratorSetIllegal()
comment20.text=\nTest\ the\ iterator\ set\ method\ in\ an\ illegal\ state.\n\n
comment21.params=generator
comment21.target=<E>\ Collection<E>\ getCollection(DataGenerator<E>)
comment21.text=\nCreates\ an\ ArrayList\ containing\ data\ from\ the\ specified\ngenerator.\n@param\ <E>\ the\ type\ of\ data\ to\ generate\n@param\ generator\ the\ object\ which\ will\ provide\ the\ data\n@return\ an\ ArrayList\ containing\ the\ data\n\n
comment22.params=
comment22.target=void\ testIteratorSetForward()
comment22.text=\nTest\ the\ iterator\ set\ method\ while\ iterating\ forward.\n\n
comment23.params=
comment23.target=void\ testRemoveAtIndex()
comment23.text=\nTest\ removing\ a\ single\ element\ at\ a\ specified\ index.\n\n
comment24.params=
comment24.target=void\ testIteratorAddAtPosition()
comment24.text=\nTest\ adding\ elements\ at\ a\ specified\ index.\n\n
comment3.params=
comment3.target=void\ testIteratorPreviousIndex()
comment3.text=\nTest\ the\ list\ iterator\ previousIndex\ method.\n\n
comment4.params=
comment4.target=AbstractListTest()
comment4.text=\nDefault\ constructor\ for\ test\ class\ AbstractListTest.\n\n
comment5.params=
comment5.target=void\ testLastIndexOf()
comment5.text=\nTest\ the\ lastIndexOf\ method\ (searching\ backward).\n\n
comment6.params=
comment6.target=void\ testForCoMods4()
comment6.text=\nTest\ co-modification\:\ remove\ after\ remove.\n\n
comment7.params=
comment7.target=void\ testForCoMods3()
comment7.text=\nTest\ co-modification\:\ add\ after\ add.\n\n
comment8.params=
comment8.target=void\ testForCoMods2()
comment8.text=\nTest\ co-modification\:\ previous\ after\ remove.\n\n
comment9.params=
comment9.target=void\ testForCoMods1()
comment9.text=\nTest\ co-modification\:\ next\ after\ remove.\n\n
numComments=25
