#BlueJ class context
comment0.target=class\ ArrayList
comment0.text=\nA\ concrete\ implementation\ of\ List\ that\ is\ based\ on\ arrays.\nSince\ we\ inherit\ from\ AbstractList,\ there\ are\ only\ a\ few\ methods\nto\ implement\ such\ as\ <tt>size</tt>,\ <tt>listIterator</tt>,\ and\n<tt>subList</tt>.\ \ However\ ArrayLists\ also\ provide\ methods\n<tt>ensureCapacity</tt>\ and<tt>trimToSize</tt>\ that\ are\ unique\nto\ array\ based\ implementations.\n\n@param\ <E>\ the\ type\ of\ data\ to\ hold\ in\ the\ collection\n\n@author\ Todd\ A.\ Whittaker\n@version\ 2005-09\n\n
comment1.params=requiredCapacity
comment1.target=void\ ensureCapacity(int)
comment1.text=\nEnsures\ that\ the\ backing\ array\ has\ enough\ capacity\ to\ contain\ at\nleast\ <tt>requiredCapacity</tt>\ items.\ \ If\ not,\ then\ it\ will\nexpand\ the\ capacity\ by\ the\ larger\ of\ either\ the\ required\ capacity\nor\ 50%\ more\ +\ 1.\n@param\ requiredCapacity\ the\ desired\ capacity\n\n
comment10.params=
comment10.target=E\ previous()
comment10.text=\nReturns\ the\ index\ of\ the\ element\ that\ would\ be\ returned\ should\na\ subsequent\ call\ to\ <tt>previous</tt>\ be\ made.\n@return\ the\ index\ of\ the\ previous\ element\n@throws\ java.util.NoSuchElementException\ when\ there\ is\ no\ previous\n\n
comment11.params=
comment11.target=boolean\ hasPrevious()
comment11.text=\nReturns\ true\ when\ the\ iterator\ has\ more\ data\ to\ return\ in\ the\nreverse\ direction.\n@return\ true\ if\ the\ iterator\ has\ more\ data\n\n
comment12.params=
comment12.target=void\ synchronizeModCounts()
comment12.text=\nRe-synchronizes\ the\ modification\ counts\ between\ the\ list\nand\ the\ iterator.\n\n
comment13.target=expectedModCount
comment14.params=obj
comment14.target=void\ set(E)
comment14.text=\nReplaces\ the\ last\ element\ returned\ by\ either\ <tt>next</tt>\ or\n<tt>previous</tt>.\ \ Cannot\ be\ called\ immediately\ after\ <tt>add</tt>\nor\ <tt>remove</tt>.\n@param\ obj\ the\ object\ with\ which\ to\ replace\ the\ one\ returned\nearlier.\n\n
comment15.target=priorCursor
comment16.params=
comment16.target=void\ checkForValid()
comment16.text=\nEnsures\ that\ there\ was\ a\ prior\ call\ to\ either\ next\ or\ previous\nbefore\ performing\ an\ operation\ on\ the\ last\ returned\ item.\n@throws\ IllegalStateException\ when\ there\ was\ no\ prior\ call\n\n
comment17.target=cursor
comment18.params=obj
comment18.target=void\ add(E)
comment18.text=\nInserts\ the\ specified\ element\ into\ the\ list\ at\ the\ present\ iterator\nposition.\ \ The\ insertion\ point\ is\ before\ the\ element\ that\ would\ be\nreturned\ by\ a\ call\ to\ <tt>next</tt>\ and\ after\ the\ element\ that\ would\nbe\ returned\ by\ a\ call\ to\ <tt>previous</tt>.\ \ After\ adding\ the\nelement,\ a\ call\ to\ <tt>previous</tt>\ will\ return\ the\ newly\ inserted\nelement,\ but\ a\ call\ to\ <tt>next</tt>\ will\ return\ the\ element\nimmediately\ after\ the\ one\ inserted.\n@param\ obj\ the\ element\ to\ insert\n\n
comment19.target=data
comment2.params=
comment2.target=int\ previousIndex()
comment2.text=\nReturns\ the\ index\ of\ the\ element\ that\ would\ be\ returned\ should\na\ subsequent\ call\ to\ <tt>previous</tt>\ be\ made.\n@return\ the\ index\ of\ the\ previous\ element\n\n
comment20.params=
comment20.target=void\ clear()
comment20.text=\nRemoves\ all\ elements\ from\ the\ collection.\ \ The\ collection\ will\nbe\ empty\ after\ calling\ this\ method.\ \ A\ faster\ implementation\ than\ncan\ be\ done\ in\ the\ AbstractCollection\ class.\n\n
comment21.params=
comment21.target=void\ trimToSize()
comment21.text=\nTrims\ the\ excess\ capacity\ off\ of\ the\ backing\ array,\ reducing\ it\nto\ size()\ in\ length.\n\n
comment22.target=usedSlots
comment23.params=
comment23.target=ArrayList()
comment23.text=\nConstructs\ an\ empty\ list\ with\ an\ initial\ capacity\ of\ 10.\n\n
comment24.params=capacity
comment24.target=ArrayList(int)
comment24.text=\nConstructs\ an\ empty\ list\ with\ the\ specified\ initial\ncapacity.\n@param\ capacity\ the\ number\ of\ array\ elements\ to\ allocate\ initially\n@throws\ IllegalArgumentException\ if\ the\ specified\ initial\ncapacity\ is\ negative\n\n
comment25.params=fromIndex\ toIndex
comment25.target=List<E>\ subList(int,int)
comment25.text=\nCreate\ a\ sublist\ of\ this\ list\ between\ the\ given\ indices.\ \ The\ sublist\nis\ not\ a\ copy\ of\ the\ elements\ of\ this\ list,\ but\ rather\ a\ restricted\nview\ on\ them.\ \ Thus,\ any\ insertions,\ deletions,\ or\ replacements\nof\ elements\ in\ the\ sublist\ will\ affect\ the\ original\ list.\n\nWARNING\!\!\!\ \ This\ implementation\ does\ not\ use\ the\ "view"\ philosophy.\nAny\ changes\ to\ the\ sublist\ will\ <b>not</b>\ be\ reflected\ in\ the\noriginal\ list.\n\n@param\ fromIndex\ the\ starting\ index\ (inclusive)\ of\ the\ sublist\n@param\ toIndex\ the\ ending\ index\ (exclusive)\ of\ the\ sublist\n@return\ a\ restricted\ view\ on\ this\ list\n@throws\ IndexOutOfBoundsException\ if\ either\ index\ is\ <\ 0\ or\ >\ size.\n\n
comment26.params=position
comment26.target=ListIterator<E>\ listIterator(int)
comment26.text=\nReturns\ a\ ListIterator\ over\ the\ elements\ in\ this\ list.\ \ The\ starting\nposition\ for\ the\ list\ iterator\ will\ be\ the\ 0th\ element.\n@return\ a\ ListIterator\ over\ the\ elements\ in\ this\ list.\n\n
comment27.params=
comment27.target=int\ size()
comment27.text=\nReturns\ the\ number\ of\ elements\ in\ the\ list.\n@return\ the\ number\ of\ elements\ in\ the\ list.\n\n
comment3.params=
comment3.target=boolean\ hasNext()
comment3.text=\nReturns\ true\ when\ the\ iterator\ has\ more\ data\ to\ return.\n@return\ true\ if\ the\ iterator\ has\ more\ data\n\n
comment4.params=
comment4.target=void\ checkForComodification()
comment4.text=\nEnsures\ that\ the\ expected\ and\ actual\ modification\ counts\ between\nthe\ list\ and\ the\ iterator\ are\ in\ sync\ with\ one\ another.\n@throws\ java.util.ConcurrentModificationException\ when\ they\ aren't\n\n
comment5.target=BAD_POSITION
comment6.params=position
comment6.target=ArrayListIterator(int)
comment6.text=\nConstructs\ an\ iterator\ starting\ at\ the\ specified\ position.\n@param\ position\ where\ to\ start\ the\ iteration\n@throws\ IndexOutOfBoundsException\ if\ the\ specified\ position\ is\nnot\ within\ [0...size()]\n\n
comment7.params=
comment7.target=void\ remove()
comment7.text=\nRemoves\ the\ previously\ returned\ element\ from\ the\ iteration.\n@throws\ IllegalStateException\ when\ next\ or\ previous\ is\ not\ called\nimmediately\ before\ remove.\n\n
comment8.params=
comment8.target=int\ nextIndex()
comment8.text=\nReturns\ the\ index\ of\ the\ element\ that\ would\ be\ returned\ should\na\ subsequent\ call\ to\ <tt>next</tt>\ be\ made.\n@return\ the\ index\ of\ the\ next\ element\n\n
comment9.params=
comment9.target=E\ next()
comment9.text=\nReturns\ the\ next\ element\ from\ the\ iteration.\n@return\ the\ next\ data\ element\n@throws\ java.util.NoSuchElementException\ when\ there\ is\ no\ next\n\n
numComments=28
